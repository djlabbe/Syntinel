SCHEMA DESIGN -- https://www.mongodb.com/blog/post/6-rules-of-thumb-for-mongodb-schema-design-part-1

First consideration: How many tests will an app have?
few?
many? <----------------------------
Squillions?
------------------------------------------------------
Thus, Each test should have its own document, and an app SHOULD
contain an array of test reference IDs.

App {
  _id:
  name: String,
  description: String,
  created: Date,
  status: Boolean,
  owner:  String,
  tests: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Test' }]
}


==================================================================
==================================================================

Second Consideration: Will we want to look up tests as standalone entities?
A: YES!! We specifically want to "Get All Tests" or "Get all tests with freq = X"
   When we do this, the test still needs to know what app its associated with.
   So a TWO-WAY REFERENCE is in order.

Third Consideration: How many results will a test have?
few?
many? 
Squillions? <---------------
--------------------------------------------------------s
Thus, We want results to carry a reference to the parent test, without test maintaining a list of results.

Test = {
  _id:
  app: { type: mongoose.Schema.Types.ObjectId, ref: 'App' },
  name: String,
  description: String,
  created: Date,
  file: Object,
  status: {type: Number, enum: [-1, 0, 1], default: -1},
  scriptType: {type: String, enum: ['shell', 'selenium', 'jmeter']},
  filecontents: String,
  frequency: { type: Number, enum: [5, 30, 300, 600, 1800, 3600, 86400]},
}


Result {
  _id:
  test: mongoose.Schema.Types.ObjectId,
  created: Date,
  status: Boolean,
  output: {type: String, default: null},
  error: {type: String, default: null}
}


